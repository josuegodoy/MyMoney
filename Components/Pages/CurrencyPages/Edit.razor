@page "/currencies/edit"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Currency</h2>
<hr />
@if (Currency is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Currency" OnValidSubmit="UpdateCurrency" FormName="edit" Enhance>
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Name" @bind-Value="Currency.Name" />
                                <MudTextField Label="Code" @bind-Value="Currency.Code" />
                                <MudTextField Label="Symbol" @bind-Value="Currency.Symbol" />
                                <MudTextField Label="Plural Name" @bind-Value="Currency.PluralName" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/currencies">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Currency? Currency { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Currency ??= await context.Currency.FirstOrDefaultAsync(m => m.Id == Id);

        if (Currency is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCurrency()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Currency!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CurrencyExists(Currency!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/currencies");
    }

    private bool CurrencyExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Currency.Any(e => e.Id == id);
    }
}
