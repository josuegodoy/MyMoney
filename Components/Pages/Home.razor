@page "/"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@using MyMoney.Data
@implements IAsyncDisposable
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory

<PageTitle>Home</PageTitle>

@if (categorySummaries.Count > 0)
{
    @* <MudChart ChartType="ChartType.Pie" InputData="@data.ToArray()" InputLabels="@labels.ToArray()" Width="300px" Height="300px" /> *@

    <h3>Category Totals</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Category</th>
                <th>Total Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var summary in categorySummaries)
            {
                <tr>
                    <td>@summary.CategoryName</td>
                    <td>@summary.TotalAmount</td> <!-- Formata como moeda -->
                </tr>
            }
        </tbody>
    </table>

}
else
{
    <p>No records found.</p>
}

@code {
    private MyMoneyContext context = default!;
    private List<Record> records;
    private List<CategorySummary> categorySummaries = new();
    private List<double> data = new();
    private List<string> labels = new();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        records = await context.Record
        .Include(r => r.Category) // Inclui Category
        .Include(r => r.User)     // Inclui User, se existir
        .Include(r => r.FromAccount)
        .ToListAsync();

        // Consulta para agrupar e somar valores por categoria
        categorySummaries = await context.Record
            .Include(r => r.Category) // Inclui os dados da Category
            .GroupBy(r => r.Category.Name) // Agrupa por nome da categoria
            .Select(g => new CategorySummary
                {
                    CategoryName = g.Key,
                    TotalAmount = g.Sum(r => r.Amount)

                })
            .ToListAsync();

    }

    private class CategorySummary
    {
        public string CategoryName { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}