@page "/records/edit"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Record</h2>
<hr />
@if (Record is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Record" OnValidSubmit="UpdateRecord" FormName="edit" Enhance>
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <input type="hidden" name="Record.Id" value="@Record.Id" />
                                <MudTextField Label="Name" @bind-Value="Record.Name" />
                                <MudDatePicker Label="Transaction Date" Editable="true" @bind-Date="Record.Date" Placeholder="Select Date" />
                                <MudSelect T="int" Label="Category" For="@(() => Record.CategoryId)">
                                    <MudSelectItem T="int" Value=0 Disabled>Select Category</MudSelectItem>
                                    @foreach (var category in categories)
                                    {
                                        <MudSelectItem T="int" Value="@category.Id">@category.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudNumericField Label="Amount" Variant="Variant.Text" @bind-Value="Record.Amount" Format="C" />
                                <MudTextField Label="Description" @bind-Value="Record.Description" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/records">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Record? Record { get; set; }
    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Record ??= await context.Record.FirstOrDefaultAsync(m => m.Id == Id);
        categories = await context.Category.ToListAsync();
        if (Record is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRecord()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Record!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RecordExists(Record!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/records");
    }

    private bool RecordExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Record.Any(e => e.Id == id);
    }
}
