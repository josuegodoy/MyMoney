@page "/records"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@using MyMoney.Data
@implements IAsyncDisposable
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory

<PageTitle>Records</PageTitle>

<h1 class="pt-3">Records</h1>


<MudDataGrid Items="@records" Dense="true" Hover="true" Bordered="true" Style="--mud-palette-surface: transparent" SortMode="SortMode.Single">
    <ToolBarContent>
        <MudSpacer />
        <MudIconButton Variant="Variant.Filled" href="records/create" Color="Color.Success" Icon="@Icons.Material.Filled.Add"></MudIconButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Title="Category" Property="records => records.Category.Name" />
        <PropertyColumn Property="records => records.Description" />
        <TemplateColumn Title="Amount">
            <CellTemplate>
                @if (context.Item.Type == "Expense"){
                <MudText Style="color: red"> @context.Item.Amount </MudText>
                }else{
                    <MudText Style="color: olivedrab"> @context.Item.Amount </MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Title="Account" Property="records => records.FromAccount.Name" />
        <TemplateColumn Title="Transaction Date" SortBy="@(records => records.Date)" Sortable="true">
            <CellTemplate>
                <MudDatePicker Editable="false" Disabled @bind-Date="@context.Item.Date" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Href="@($"records/edit?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                <MudIconButton Href="@($"records/details?id={context.Item.Id}")" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Pages"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private MyMoneyContext context = default!;
    private List<Record> records;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        records = await context.Record
        .Include(r => r.Category) // Inclui Category
        .Include(r => r.User)     // Inclui User, se existir
        .Include(r => r.FromAccount)
        .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
