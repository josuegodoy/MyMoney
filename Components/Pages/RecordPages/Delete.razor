@page "/records/delete"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Record</h2>
    <hr />
    @if (record is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@record.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@record.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@record.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@record.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@record.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@record.UpdatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedAt</dt>
            <dd class="col-sm-10">@record.DeletedAt</dd>
        </dl>
        <EditForm method="post" Model="record" OnValidSubmit="DeleteRecord" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(record is null)">Delete</button> |
            <a href="/records">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Record? record;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        record = await context.Record.FirstOrDefaultAsync(m => m.Id == Id);

        if (record is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRecord()
    {
        using var context = DbFactory.CreateDbContext();
        context.Record.Remove(record!);

        // Ajustar o saldo da conta
        var account = await context.Account.FindAsync(record!.ToAccountId);
        if (account != null)
        {
            account.CurrentBalance += record.Type == "Income"
                ? -record.Amount
                : record.Amount;
        }
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/records");
    }
}
