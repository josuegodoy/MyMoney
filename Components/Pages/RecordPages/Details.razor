@page "/records/details"
@using Microsoft.EntityFrameworkCore
@using MyMoney.Models
@using MyMoney.Data
@inject IDbContextFactory<MyMoney.Data.MyMoneyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Record</h2>
    <hr />
    @if (record is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar>
                         <MudIcon Icon=@(record.Category?.Icon) Size="Size.Medium" /> 
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@record.Name</MudText>
                    <MudText Typo="Typo.body1">@record.Description</MudText><hr />
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTooltip Text="Back to List">
                        <MudIconButton Href="@($"records")" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                    </MudTooltip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudChip T="string">  @record.Category?.Name </MudChip> 
                <MudChip T="string" Style="@($"background-color:{@record.FromAccount?.Color};")" Color="Color.Dark">@record.FromAccount?.Name</MudChip> 
                <MudChip T="string">R$ @record.Amount</MudChip>
            </MudCardContent>
            <MudCardActions>
                <MudButton Href="@($"records/edit?id={@record.Id}")" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                <MudButton Href="@($"records/delete?id={@record.Id}")" Variant="Variant.Filled" Color="Color.Secondary">Delete</MudButton>
            </MudCardActions>
        </MudCard>
    }
</div>

@code {
    private MyMoneyContext context = default!;

    private Record? record = new();

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        record = await context.Record
        .Include(r => r.Category)
        .Include(r => r.FromAccount)
        .FirstOrDefaultAsync(r => r.Id == Id);
    }
}
